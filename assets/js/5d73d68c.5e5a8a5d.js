"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[4371],{28453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>d});var r=i(96540);const l={},t=r.createContext(l);function s(n){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:s(n.components),r.createElement(t.Provider,{value:e},n.children)}},33368:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"coding/leetcode/tree/minimum-depth-of-binary-tree","title":"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6","description":"\u9898\u76ee\u63cf\u8ff0","source":"@site/docs/coding/leetcode/tree/minimum-depth-of-binary-tree.md","sourceDirName":"coding/leetcode/tree","slug":"/coding/leetcode/tree/minimum-depth-of-binary-tree","permalink":"/docs/coding/leetcode/tree/minimum-depth-of-binary-tree","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/coding/leetcode/tree/minimum-depth-of-binary-tree.md","tags":[{"inline":true,"label":"\u4e8c\u53c9\u6811","permalink":"/docs/tags/\u4e8c\u53c9\u6811"},{"inline":true,"label":"dfs","permalink":"/docs/tags/dfs"},{"inline":true,"label":"bfs","permalink":"/docs/tags/bfs"}],"version":"current","frontMatter":{"id":"minimum-depth-of-binary-tree","title":"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6","tags":["\u4e8c\u53c9\u6811","dfs","bfs"]},"sidebar":"tutorialSidebar","previous":{"title":"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6","permalink":"/docs/coding/leetcode/tree/maximum-depth-of-binary-tree"},"next":{"title":"100. \u76f8\u540c\u7684\u6811","permalink":"/docs/coding/leetcode/tree/same-tree"}}');var l=i(74848),t=i(28453);const s={id:"minimum-depth-of-binary-tree",title:"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",tags:["\u4e8c\u53c9\u6811","dfs","bfs"]},d=void 0,o={},c=[{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:2},{value:"\u89e3\u9898\u65b9\u6cd5",id:"\u89e3\u9898\u65b9\u6cd5",level:2},{value:"\u65b9\u6cd5\u4e00: dfs",id:"\u65b9\u6cd5\u4e00-dfs",level:3},{value:"\u65b9\u6cd5\u4e8c: bfs",id:"\u65b9\u6cd5\u4e8c-bfs",level:3}];function u(n){const e={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.h2,{id:"\u9898\u76ee\u63cf\u8ff0",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,l.jsx)(e.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002"}),"\n",(0,l.jsx)(e.p,{children:"\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002"}),"\n",(0,l.jsx)(e.p,{children:"\u8bf4\u660e\uff1a\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"}),"\n",(0,l.jsx)(e.p,{children:"\u793a\u4f8b 1\uff1a"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"\u8f93\u5165\uff1aroot = [3,9,20,null,null,15,7]\n\u8f93\u51fa\uff1a2\n"})}),"\n",(0,l.jsx)(e.p,{children:"\u793a\u4f8b 2\uff1a"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"\u8f93\u5165\uff1aroot = [2,null,3,null,4,null,5,null,6]\n\u8f93\u51fa\uff1a5\n"})}),"\n",(0,l.jsx)(e.p,{children:"\u63d0\u793a\uff1a"}),"\n",(0,l.jsxs)(e.p,{children:["\u6811\u4e2d\u8282\u70b9\u6570\u7684\u8303\u56f4\u5728 [0, 105] \u5185\n-1000 ",(0,l.jsx)(e.code,{children:"<="})," Node.val ",(0,l.jsx)(e.code,{children:"<="})," 1000"]}),"\n",(0,l.jsx)(e.h2,{id:"\u89e3\u9898\u65b9\u6cd5",children:"\u89e3\u9898\u65b9\u6cd5"}),"\n",(0,l.jsx)(e.h3,{id:"\u65b9\u6cd5\u4e00-dfs",children:"\u65b9\u6cd5\u4e00: dfs"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u601d\u8def\uff1a"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386"}),"\n",(0,l.jsx)(e.li,{children:"\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5c42\u7ea7\uff0c\u627e\u51fa\u6700\u5c0f\u5c42\u7ea7"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u6b65\u9aa4\uff1a"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u521b\u5efa\u53d8\u91cf\u8bb0\u5f55\u6700\u5c0f\u6df1\u5ea6"}),"\n",(0,l.jsx)(e.li,{children:"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6811\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5c42\u7ea7\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\u66f4\u65b0\u6700\u5c0f\u6df1\u5ea6\u53d8\u91cf"}),"\n",(0,l.jsx)(e.li,{children:"\u8fd4\u56de\u6700\u5c0f\u6df1\u5ea6\u53d8\u91cf"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u590d\u6742\u5ea6\u5206\u6790\uff1a"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"}),"\n",(0,l.jsx)(e.li,{children:"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  let res = Infinity;\n  const dfs = (n, l) => {\n    if (!n) {\n      res = 0;\n      return;\n    }\n    if (!n.left && !n.right && res) {\n      res = Math.min(res, l);\n    }\n    if (n.left) {\n      dfs(n.left, l + 1);\n    }\n    if (n.right) {\n      dfs(n.right, l + 1);\n    }\n  };\n  dfs(root, 1);\n  return res;\n};\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u65b9\u6cd5\u4e8c-bfs",children:"\u65b9\u6cd5\u4e8c: bfs"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u601d\u8def\uff1a"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u6c42\u6700\u5c0f\u6df1\u5ea6\uff0c\u8003\u8651\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"}),"\n",(0,l.jsx)(e.li,{children:"\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u9047\u5230\u53f6\u5b50\u8282\u70b9\u5c31\u505c\u6b62\uff0c\u8fd4\u56de\u8282\u70b9\u5c42\u7ea7"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u6b65\u9aa4\uff1a"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u521b\u5efa\u53d8\u91cf\u8bb0\u5f55\u6700\u5c0f\u6df1\u5ea6"}),"\n",(0,l.jsx)(e.li,{children:"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u6811\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5c42\u7ea7\uff0c\u66f4\u65b0\u6700\u5c0f\u6df1\u5ea6\u53d8\u91cf"}),"\n",(0,l.jsx)(e.li,{children:"\u8fd4\u56de\u6700\u5c0f\u6df1\u5ea6\u904d\u5386"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u590d\u6742\u5ea6\u5206\u6790\uff1a"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u6700\u5dee\u662f O(n)\u5373\u6240\u6709\u8282\u70b9"}),"\n",(0,l.jsx)(e.li,{children:"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n),\u6700\u5dee\u662f O(n)\u5373\u6240\u6709\u8282\u70b9"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  if (!root) {\n    return 0;\n  }\n  let res = 1;\n  const queue = [root];\n  while (queue.length) {\n    const queueSize = queue.length;\n    for (let i = 0; i < queueSize; i += 1) {\n      const node = queue.shift();\n      if (!node.left && !node.right) {\n        return res;\n      }\n      if (node.left) {\n        queue.push(node.left);\n      }\n      if (node.right) {\n        queue.push(node.right);\n      }\n    }\n    if (queueSize) {\n      res += 1;\n    }\n  }\n  return res;\n};\n"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  if (!root) {\n    return 0;\n  }\n  const queue = [[root, 1]];\n  while (queue.length) {\n    const [n, l] = queue.shift();\n    if (!n.left && !n.right) {\n      return l;\n    }\n    if (n.left) {\n      queue.push([n.left, l + 1]);\n    }\n    if (n.right) {\n      queue.push([n.right, l + 1]);\n    }\n  }\n};\n"})})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(u,{...n})}):u(n)}}}]);