"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8215],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(n),f=l,d=m["".concat(u,".").concat(f)]||m[f]||c[f]||a;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4066:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var r=n(7462),l=(n(7294),n(3905));const a={id:"symmetric-tree",title:"101. \u5bf9\u79f0\u4e8c\u53c9\u6811",tags:["\u4e8c\u53c9\u6811","dfs","bfs"]},i=void 0,o={unversionedId:"leetcode/tree/symmetric-tree",id:"leetcode/tree/symmetric-tree",title:"101. \u5bf9\u79f0\u4e8c\u53c9\u6811",description:"\u9898\u76ee\u63cf\u8ff0",source:"@site/docs/leetcode/tree/symmetric-tree.md",sourceDirName:"leetcode/tree",slug:"/leetcode/tree/symmetric-tree",permalink:"/myblog/docs/leetcode/tree/symmetric-tree",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/tree/symmetric-tree.md",tags:[{label:"\u4e8c\u53c9\u6811",permalink:"/myblog/docs/tags/\u4e8c\u53c9\u6811"},{label:"dfs",permalink:"/myblog/docs/tags/dfs"},{label:"bfs",permalink:"/myblog/docs/tags/bfs"}],version:"current",frontMatter:{id:"symmetric-tree",title:"101. \u5bf9\u79f0\u4e8c\u53c9\u6811",tags:["\u4e8c\u53c9\u6811","dfs","bfs"]},sidebar:"leetcode",previous:{title:"100. \u76f8\u540c\u7684\u6811",permalink:"/myblog/docs/leetcode/tree/same-tree"},next:{title:"417. \u592a\u5e73\u6d0b\u5927\u897f\u6d0b\u6c34\u6d41\u95ee\u9898",permalink:"/myblog/docs/leetcode/graph/pacific-atlantic-water-flow"}},u={},s=[{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:2},{value:"\u89e3\u9898\u65b9\u6cd5",id:"\u89e3\u9898\u65b9\u6cd5",level:2},{value:"\u65b9\u6cd5\u4e00\uff1adfs",id:"\u65b9\u6cd5\u4e00dfs",level:3},{value:"\u65b9\u6cd5\u4e8c: bfs",id:"\u65b9\u6cd5\u4e8c-bfs",level:3}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"\u9898\u76ee\u63cf\u8ff0"},"\u9898\u76ee\u63cf\u8ff0"),(0,l.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c \u68c0\u67e5\u5b83\u662f\u5426\u8f74\u5bf9\u79f0\u3002"),(0,l.kt)("p",null,"\u793a\u4f8b 1\uff1a\n",(0,l.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg",alt:"symtree1"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"\u8f93\u5165\uff1aroot = [1,2,2,3,4,4,3]\n\u8f93\u51fa\uff1atrue\n")),(0,l.kt)("p",null,"\u793a\u4f8b 2\uff1a\n",(0,l.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg",alt:"symtree2"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"\u8f93\u5165\uff1aroot = [1,2,2,null,3,null,3]\n\u8f93\u51fa\uff1afalse\n")),(0,l.kt)("p",null,"\u63d0\u793a\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 ","[1, 1000]"," \u5185"),(0,l.kt)("li",{parentName:"ul"},"-100 <= Node.val <= 100")),(0,l.kt)("h2",{id:"\u89e3\u9898\u65b9\u6cd5"},"\u89e3\u9898\u65b9\u6cd5"),(0,l.kt)("h3",{id:"\u65b9\u6cd5\u4e00dfs"},"\u65b9\u6cd5\u4e00\uff1adfs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u601d\u8def\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5224\u65ad\u4e8c\u53c9\u6811\u662f\u5426\u4e3a\u955c\u50cf\u7684\u8bdd\uff0c\u9700\u8981\u6bd4\u8f83\u5b50\u6811\u7684\u5bf9\u79f0\u4f4d\u7f6e\u662f\u5426\u76f8\u540c\uff0c\u5373\u5de6\u5b50\u6811\u7684\u5de6\u4fa7\u4e0e\u53f3\u5b50\u6811\u7684\u53f3\u4fa7\uff0c\u5de6\u5b50\u6811\u7684\u53f3\u4fa7\u548c\u53f3\u5b50\u6811\u7684\u5de6\u4fa7"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6b65\u9aa4\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5224\u65ad\u4e24\u68f5\u6811\u8282\u70b9",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u90fd\u4e3a\u7a7a\u5219\u76f8\u540c"),(0,l.kt)("li",{parentName:"ul"},"\u4e00\u4e2a\u4e3a\u7a7a\u53e6\u4e00\u4e2a\u4e0d\u4e3a\u7a7a\uff0c\u4e0d\u540c"),(0,l.kt)("li",{parentName:"ul"},"\u8282\u70b9\u90fd\u6709\u503c\u4f46\u662f val \u4e0d\u540c\uff0c\u4e0d\u540c"),(0,l.kt)("li",{parentName:"ul"},"\u9012\u5f52\u4ed6\u4eec\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u590d\u6742\u5ea6\u5206\u6790\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u9012\u5f52\u5c42\u6570")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isSymmetric = function(root) {\n  const dfs = (left, right) => {\n    if (left === null && right === null) {\n      return true\n    }\n    if (left === null || right === null) {\n      return false\n    }\n    if (left.val !== right.val) {\n      return false\n    }\n    return dfs(left.left,right.right) && dfs(left.right,right.left)\n  }\n  return dfs(root.left, root.right)\n}\n")),(0,l.kt)("h3",{id:"\u65b9\u6cd5\u4e8c-bfs"},"\u65b9\u6cd5\u4e8c: bfs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u601d\u8def\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5c06\u4e92\u4e3a\u955c\u50cf\u7684\u8282\u70b9\u52a0\u5165\u961f\u5217\u6bd4\u8f83"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6b65\u9aa4\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u521d\u59cb\u5316\u961f\u5217\uff0c\u5165\u961f\u6839\u8282\u70b9\u7684\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9"),(0,l.kt)("li",{parentName:"ul"},"\u53d6\u961f\u5934\u524d\u4e24\u9879\uff0c\u6bd4\u8f83\u503c"),(0,l.kt)("li",{parentName:"ul"},"\u5c06\u4e24\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u6309\u7167\u76f8\u53cd\u7684\u987a\u5e8f\u63d2\u5165\u961f\u5217"),(0,l.kt)("li",{parentName:"ul"},"\u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\u6216\u8005\u6bd4\u8f83\u7684\u8282\u70b9\u503c\u4e0d\u540c\u65f6\uff0c\u7ed3\u675f\u5faa\u73af"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u590d\u6742\u5ea6\u5206\u6790\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u961f\u5217\u957f\u5ea6")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isSymmetric = function(root) {\n  const queue = [root.left, root.right]\n  while (queue.length) {\n    const left = queue.shift()\n    const right = queue.shift()\n    if (left === null && right === null) {\n      continue\n    }\n    if (left === null || right === null) {\n      return false\n    }\n    if (left.val !== right.val) {\n      return false\n    }\n    queue.push(left.left, right.right)\n    queue.push(left.right, right.left)\n  }\n  return true\n}\n")))}c.isMDXComponent=!0}}]);