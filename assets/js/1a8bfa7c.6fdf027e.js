"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[3910],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(96540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},31852:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"coding/leetcode/array/merge-sorted-array","title":"merge-sorted-array","description":"\x3c!--","source":"@site/docs/coding/leetcode/array/merge-sorted-array.md","sourceDirName":"coding/leetcode/array","slug":"/coding/leetcode/array/merge-sorted-array","permalink":"/docs/coding/leetcode/array/merge-sorted-array","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/coding/leetcode/array/merge-sorted-array.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II","permalink":"/docs/coding/leetcode/array/intersection-of-two-arrays-ii"},"next":{"title":"209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","permalink":"/docs/coding/leetcode/array/minimum-size-subarray-sum"}}');var s=r(74848),a=r(28453);const i={},o="\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4",c={},u=[{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:2},{value:"\u89e3\u9898\u65b9\u6cd5",id:"\u89e3\u9898\u65b9\u6cd5",level:2},{value:"\u65b9\u6cd5\u4e00",id:"\u65b9\u6cd5\u4e00",level:3}];function l(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4",children:"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4"})}),"\n",(0,s.jsx)(n.h2,{id:"\u9898\u76ee\u63cf\u8ff0",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,s.jsxs)(n.p,{children:["\u7ed9\u4f60\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4\xa0nums1 \u548c nums2\uff0c\u8bf7\u4f60\u5c06 nums2 \u5408\u5e76\u5230\xa0nums1\xa0\u4e2d\uff0c\u4f7f nums1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002",(0,s.jsx)(n.br,{}),"\n","Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array."]}),"\n",(0,s.jsx)(n.p,{children:"\u8bf4\u660e\uff1a\r\n\u521d\u59cb\u5316\xa0nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a\xa0m \u548c n \u3002\r\n\u4f60\u53ef\u4ee5\u5047\u8bbe\xa0nums1\xa0\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e\xa0m + n\uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,s.jsx)(n.p,{children:"\u8f93\u5165\uff1a\r\nnums1 = [1,2,3,0,0,0], m = 3\r\nnums2 = [2,5,6],       n = 3"}),"\n",(0,s.jsx)(n.p,{children:"\u8f93\u51fa\uff1a[1,2,2,3,5,6]"}),"\n",(0,s.jsx)(n.h2,{id:"\u89e3\u9898\u65b9\u6cd5",children:"\u89e3\u9898\u65b9\u6cd5"}),"\n",(0,s.jsx)(n.h3,{id:"\u65b9\u6cd5\u4e00",children:"\u65b9\u6cd5\u4e00"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"/**\r\n * @param {number[]} nums1\r\n * @param {number} m\r\n * @param {number[]} nums2\r\n * @param {number} n\r\n * @return {void} Do not return anything, modify nums1 in-place instead.\r\n */\r\nvar merge = function(nums1, m, nums2, n) {\r\n    nums1.length = m\r\n    nums2.length = n\r\n    let left = 0\r\n    let right = 0\r\n    let result = []\r\n    while(left < m && right < n) {\r\n        if(nums1[left] < nums2[right]){\r\n            result.push(nums1[left])\r\n            left++\r\n        } else {\r\n            result.push(nums2[right])\r\n            right++\r\n        }\r\n    }\r\n    result = result.concat(nums1.slice(left)).concat(nums2.slice(right))\r\n    for(let i = 0; i < result.length; i++) {\r\n        nums1[i] = result[i]\r\n    }\r\n};\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);