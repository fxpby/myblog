"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[2866],{28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>d});var i=t(96540);const l={},s=i.createContext(l);function r(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:r(n.components),i.createElement(s.Provider,{value:e},n.children)}},68530:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"coding/leetcode/linkedList/add-two-numbers","title":"2. \u4e24\u6570\u76f8\u52a0","description":"\u7ed9\u4f60\u4e24\u4e2a \xa0 \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \xa0 \u9006\u5e8f \xa0 \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \xa0 \u4e00\u4f4d \xa0 \u6570\u5b57\u3002","source":"@site/docs/coding/leetcode/linkedList/add-two-numbers.md","sourceDirName":"coding/leetcode/linkedList","slug":"/coding/leetcode/linkedList/add-two-numbers","permalink":"/myblog/docs/coding/leetcode/linkedList/add-two-numbers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/coding/leetcode/linkedList/add-two-numbers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20","permalink":"/myblog/docs/coding/leetcode/heap/top-k-frequent-elements"},"next":{"title":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9","permalink":"/myblog/docs/coding/leetcode/linkedList/delete-node-in-a-linked-list"}}');var l=t(74848),s=t(28453);const r={},d="2. \u4e24\u6570\u76f8\u52a0",o={},a=[{value:"\u89e3\u9898\u65b9\u6cd5",id:"\u89e3\u9898\u65b9\u6cd5",level:2},{value:"\u65b9\u6cd5\u4e00: \u53cc\u6307\u9488",id:"\u65b9\u6cd5\u4e00-\u53cc\u6307\u9488",level:3},{value:"\u65b9\u6cd5\u4e8c\uff1a\u4e09\u6307\u9488",id:"\u65b9\u6cd5\u4e8c\u4e09\u6307\u9488",level:3}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"2-\u4e24\u6570\u76f8\u52a0",children:"2. \u4e24\u6570\u76f8\u52a0"})}),"\n",(0,l.jsx)(e.p,{children:"\u7ed9\u4f60\u4e24\u4e2a \xa0 \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \xa0 \u9006\u5e8f \xa0 \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \xa0 \u4e00\u4f4d \xa0 \u6570\u5b57\u3002"}),"\n",(0,l.jsx)(e.p,{children:"\u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002"}),"\n",(0,l.jsx)(e.p,{children:"\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0\xa0 \u5f00\u5934\u3002"}),"\n",(0,l.jsx)(e.p,{children:"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\xa0as a linked list."}),"\n",(0,l.jsx)(e.p,{children:"You may assume the two numbers do not contain any leading zero, except the number 0 itself."}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"\u793a\u4f8b 1\uff1a\n\u8f93\u5165\uff1al1 = [2,4,3], l2 = [5,6,4]\n\u8f93\u51fa\uff1a[7,0,8]\n\u89e3\u91ca\uff1a342 + 465 = 807.\n\n\u793a\u4f8b 2\uff1a\n\u8f93\u5165\uff1al1 = [0], l2 = [0]\n\u8f93\u51fa\uff1a[0]\n\n\u793a\u4f8b 3\uff1a\n\u8f93\u5165\uff1al1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n\u8f93\u51fa\uff1a[8,9,9,9,0,0,0,1]\n"})}),"\n",(0,l.jsx)(e.p,{children:"\u63d0\u793a\uff1a"}),"\n",(0,l.jsxs)(e.p,{children:["\u6bcf\u4e2a\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6570\u5728\u8303\u56f4 [1, 100] \u5185\n0 ",(0,l.jsx)(e.code,{children:"<="})," Node.val ",(0,l.jsx)(e.code,{children:"<="})," 9\n\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u5217\u8868\u8868\u793a\u7684\u6570\u5b57\u4e0d\u542b\u524d\u5bfc\u96f6"]}),"\n",(0,l.jsx)(e.p,{children:"Constraints:"}),"\n",(0,l.jsxs)(e.p,{children:["The number of nodes in each linked list is in the range [1, 100].\n0 ",(0,l.jsx)(e.code,{children:"<="})," Node.val ",(0,l.jsx)(e.code,{children:"<="})," 9\nIt is guaranteed that the list represents a number that does not have leading zeros."]}),"\n",(0,l.jsx)(e.h2,{id:"\u89e3\u9898\u65b9\u6cd5",children:"\u89e3\u9898\u65b9\u6cd5"}),"\n",(0,l.jsx)(e.h3,{id:"\u65b9\u6cd5\u4e00-\u53cc\u6307\u9488",children:"\u65b9\u6cd5\u4e00: \u53cc\u6307\u9488"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n  let pre = new ListNode(0);\n  let cur = pre;\n  let carry = 0;\n\n  while (l1 || l2) {\n    const x = l1 ? l1.val : 0;\n    const y = l2 ? l2.val : 0;\n    const sum = x + y + carry;\n    cur.next = new ListNode(sum % 10);\n    carry = Math.floor(sum / 10);\n    cur = cur.next;\n\n    if (l1) {\n      l1 = l1.next;\n    }\n\n    if (l2) {\n      l2 = l2.next;\n    }\n  }\n\n  if (carry) {\n    cur.next = new ListNode(carry);\n  }\n\n  return pre.next;\n};\n"})}),"\n",(0,l.jsx)(e.h3,{id:"\u65b9\u6cd5\u4e8c\u4e09\u6307\u9488",children:"\u65b9\u6cd5\u4e8c\uff1a\u4e09\u6307\u9488"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n  let l3 = new ListNode(0);\n\n  let p1 = l1;\n  let p2 = l2;\n  let p3 = l3;\n\n  let carry = 0;\n\n  while (p1 || p2) {\n    let x = p1 ? p1.val : 0;\n    let y = p2 ? p2.val : 0;\n\n    let sum = x + y + carry;\n    p3.next = new ListNode(sum % 10);\n    carry = Math.floor(sum / 10);\n\n    if (p1) {\n      p1 = p1.next;\n    }\n    if (p2) {\n      p2 = p2.next;\n    }\n    p3 = p3.next;\n  }\n\n  if (carry) {\n    p3.next = new ListNode(carry);\n  }\n  return l3.next;\n};\n"})})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(c,{...n})}):c(n)}}}]);