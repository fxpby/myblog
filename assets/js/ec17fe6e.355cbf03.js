"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3713],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=p(t),d=l,c=m["".concat(u,".").concat(d)]||m[d]||f[d]||i;return t?r.createElement(c,a(a({ref:n},s),{},{components:t})):r.createElement(c,a({ref:n},s))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,a=new Array(i);a[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6773:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=t(7462),l=(t(7294),t(3905));const i={id:"minimum-depth-of-binary-tree",title:"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",tags:["\u4e8c\u53c9\u6811","dfs","bfs"]},a=void 0,o={unversionedId:"leetcode/tree/minimum-depth-of-binary-tree",id:"leetcode/tree/minimum-depth-of-binary-tree",title:"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",description:"\u9898\u76ee\u63cf\u8ff0",source:"@site/docs/leetcode/tree/minimum-depth-of-binary-tree.md",sourceDirName:"leetcode/tree",slug:"/leetcode/tree/minimum-depth-of-binary-tree",permalink:"/myblog/docs/leetcode/tree/minimum-depth-of-binary-tree",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/tree/minimum-depth-of-binary-tree.md",tags:[{label:"\u4e8c\u53c9\u6811",permalink:"/myblog/docs/tags/\u4e8c\u53c9\u6811"},{label:"dfs",permalink:"/myblog/docs/tags/dfs"},{label:"bfs",permalink:"/myblog/docs/tags/bfs"}],version:"current",frontMatter:{id:"minimum-depth-of-binary-tree",title:"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",tags:["\u4e8c\u53c9\u6811","dfs","bfs"]},sidebar:"leetcode",previous:{title:"76.\u6700\u5c0f\u8986\u76d6\u5b50\u4e32",permalink:"/myblog/docs/leetcode/dictionary/minimum-window-substring"},next:{title:"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",permalink:"/myblog/docs/leetcode/tree/maximum-depth-of-binary-tree"}},u={},p=[{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:2},{value:"\u89e3\u9898\u65b9\u6cd5",id:"\u89e3\u9898\u65b9\u6cd5",level:2},{value:"\u65b9\u6cd5\u4e00: dfs",id:"\u65b9\u6cd5\u4e00-dfs",level:3},{value:"\u65b9\u6cd5\u4e8c: bfs",id:"\u65b9\u6cd5\u4e8c-bfs",level:3}],s={toc:p};function f(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"\u9898\u76ee\u63cf\u8ff0"},"\u9898\u76ee\u63cf\u8ff0"),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002"),(0,l.kt)("p",null,"\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002"),(0,l.kt)("p",null,"\u8bf4\u660e\uff1a\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"),(0,l.kt)("p",null,"\u793a\u4f8b 1\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"\u8f93\u5165\uff1aroot = [3,9,20,null,null,15,7]\n\u8f93\u51fa\uff1a2\n")),(0,l.kt)("p",null,"\u793a\u4f8b 2\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"\u8f93\u5165\uff1aroot = [2,null,3,null,4,null,5,null,6]\n\u8f93\u51fa\uff1a5\n")),(0,l.kt)("p",null,"\u63d0\u793a\uff1a"),(0,l.kt)("p",null,"\u6811\u4e2d\u8282\u70b9\u6570\u7684\u8303\u56f4\u5728 ","[0, 105]"," \u5185\n-1000 <= Node.val <= 1000"),(0,l.kt)("h2",{id:"\u89e3\u9898\u65b9\u6cd5"},"\u89e3\u9898\u65b9\u6cd5"),(0,l.kt)("h3",{id:"\u65b9\u6cd5\u4e00-dfs"},"\u65b9\u6cd5\u4e00: dfs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u601d\u8def\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386"),(0,l.kt)("li",{parentName:"ul"},"\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5c42\u7ea7\uff0c\u627e\u51fa\u6700\u5c0f\u5c42\u7ea7"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6b65\u9aa4\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u521b\u5efa\u53d8\u91cf\u8bb0\u5f55\u6700\u5c0f\u6df1\u5ea6"),(0,l.kt)("li",{parentName:"ul"},"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6811\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5c42\u7ea7\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\u66f4\u65b0\u6700\u5c0f\u6df1\u5ea6\u53d8\u91cf"),(0,l.kt)("li",{parentName:"ul"},"\u8fd4\u56de\u6700\u5c0f\u6df1\u5ea6\u53d8\u91cf"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u590d\u6742\u5ea6\u5206\u6790\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  let res = Infinity;\n  const dfs = (n, l) => {\n    if (!n) {\n      res = 0;\n      return;\n    }\n    if (!n.left && !n.right && res) {\n      res = Math.min(res, l);\n    }\n    if (n.left) {\n      dfs(n.left, l + 1);\n    }\n    if (n.right) {\n      dfs(n.right, l + 1);\n    }\n  };\n  dfs(root, 1);\n  return res;\n};\n")),(0,l.kt)("h3",{id:"\u65b9\u6cd5\u4e8c-bfs"},"\u65b9\u6cd5\u4e8c: bfs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u601d\u8def\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u6c42\u6700\u5c0f\u6df1\u5ea6\uff0c\u8003\u8651\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"),(0,l.kt)("li",{parentName:"ul"},"\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u9047\u5230\u53f6\u5b50\u8282\u70b9\u5c31\u505c\u6b62\uff0c\u8fd4\u56de\u8282\u70b9\u5c42\u7ea7"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6b65\u9aa4\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u521b\u5efa\u53d8\u91cf\u8bb0\u5f55\u6700\u5c0f\u6df1\u5ea6"),(0,l.kt)("li",{parentName:"ul"},"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u6811\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5c42\u7ea7\uff0c\u66f4\u65b0\u6700\u5c0f\u6df1\u5ea6\u53d8\u91cf"),(0,l.kt)("li",{parentName:"ul"},"\u8fd4\u56de\u6700\u5c0f\u6df1\u5ea6\u904d\u5386"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u590d\u6742\u5ea6\u5206\u6790\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u6700\u5dee\u662f O(n)\u5373\u6240\u6709\u8282\u70b9"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n),\u6700\u5dee\u662f O(n)\u5373\u6240\u6709\u8282\u70b9")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  if (!root) {\n    return 0;\n  }\n  let res = 1;\n  const queue = [root];\n  while (queue.length) {\n    const queueSize = queue.length;\n    for (let i = 0; i < queueSize; i += 1) {\n      const node = queue.shift();\n      if (!node.left && !node.right) {\n        return res;\n      }\n      if (node.left) {\n        queue.push(node.left);\n      }\n      if (node.right) {\n        queue.push(node.right);\n      }\n    }\n    if (queueSize) {\n      res += 1;\n    }\n  }\n  return res;\n};\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  if (!root) {\n    return 0;\n  }\n  const queue = [[root, 1]];\n  while (queue.length) {\n    const [n, l] = queue.shift();\n    if (!n.left && !n.right) {\n      return l;\n    }\n    if (n.left) {\n      queue.push([n.left, l + 1]);\n    }\n    if (n.right) {\n      queue.push([n.right, l + 1]);\n    }\n  }\n};\n")))}f.isMDXComponent=!0}}]);