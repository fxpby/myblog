"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7880],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=r.createContext({}),o=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},s=function(e){var n=o(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),f=o(t),m=l,d=f["".concat(p,".").concat(m)]||f[m]||c[m]||a;return t?r.createElement(d,u(u({ref:n},s),{},{components:t})):r.createElement(d,u({ref:n},s))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,u=new Array(a);u[0]=f;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,u[1]=i;for(var o=2;o<a;o++)u[o]=t[o];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9965:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>o});var r=t(87462),l=(t(67294),t(3905));const a={id:"same-tree",title:"100. \u76f8\u540c\u7684\u6811",tags:["\u4e8c\u53c9\u6811","dfs","bfs"]},u=void 0,i={unversionedId:"leetcode/tree/same-tree",id:"leetcode/tree/same-tree",title:"100. \u76f8\u540c\u7684\u6811",description:"\u9898\u76ee\u63cf\u8ff0",source:"@site/docs/leetcode/tree/same-tree.md",sourceDirName:"leetcode/tree",slug:"/leetcode/tree/same-tree",permalink:"/myblog/docs/leetcode/tree/same-tree",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/leetcode/tree/same-tree.md",tags:[{label:"\u4e8c\u53c9\u6811",permalink:"/myblog/docs/tags/\u4e8c\u53c9\u6811"},{label:"dfs",permalink:"/myblog/docs/tags/dfs"},{label:"bfs",permalink:"/myblog/docs/tags/bfs"}],version:"current",frontMatter:{id:"same-tree",title:"100. \u76f8\u540c\u7684\u6811",tags:["\u4e8c\u53c9\u6811","dfs","bfs"]},sidebar:"leetcode",previous:{title:"226. \u7ffb\u8f6c\u4e8c\u53c9\u6811",permalink:"/myblog/docs/leetcode/tree/invert-binary-tree"},next:{title:"101. \u5bf9\u79f0\u4e8c\u53c9\u6811",permalink:"/myblog/docs/leetcode/tree/symmetric-tree"}},p={},o=[{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:2},{value:"\u89e3\u9898\u65b9\u6cd5",id:"\u89e3\u9898\u65b9\u6cd5",level:2},{value:"\u65b9\u6cd5\u4e00\uff1adfs",id:"\u65b9\u6cd5\u4e00dfs",level:3},{value:"\u65b9\u6cd5\u4e8c\uff1abfs",id:"\u65b9\u6cd5\u4e8cbfs",level:3}],s={toc:o};function c(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"\u9898\u76ee\u63cf\u8ff0"},"\u9898\u76ee\u63cf\u8ff0"),(0,l.kt)("p",null,"\u7ed9\u4f60\u4e24\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 p \u548c q \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u8fd9\u4e24\u68f5\u6811\u662f\u5426\u76f8\u540c\u3002\n\u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002"),(0,l.kt)("p",null,"\u793a\u4f8b 1\uff1a\n",(0,l.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg",alt:"ex1"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"\u8f93\u5165\uff1ap = [1,2,3], q = [1,2,3]\n\u8f93\u51fa\uff1atrue\n")),(0,l.kt)("p",null,"\u793a\u4f8b 2\uff1a\n",(0,l.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg",alt:"ex2"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"\u8f93\u5165\uff1ap = [1,2], q = [1,null,2]\n\u8f93\u51fa\uff1afalse\n")),(0,l.kt)("p",null,"\u793a\u4f8b 3\uff1a\n",(0,l.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg",alt:"ex3"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"\u8f93\u5165\uff1ap = [1,2,1], q = [1,1,2]\n\u8f93\u51fa\uff1afalse\n")),(0,l.kt)("p",null,"\u63d0\u793a\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u4e24\u68f5\u6811\u4e0a\u7684\u8282\u70b9\u6570\u76ee\u90fd\u5728\u8303\u56f4 ","[0, 100]"," \u5185"),(0,l.kt)("li",{parentName:"ul"},"-104 <= Node.val <= 104")),(0,l.kt)("h2",{id:"\u89e3\u9898\u65b9\u6cd5"},"\u89e3\u9898\u65b9\u6cd5"),(0,l.kt)("h3",{id:"\u65b9\u6cd5\u4e00dfs"},"\u65b9\u6cd5\u4e00\uff1adfs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u601d\u8def\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u6df1\u5ea6\u4f18\u5148\u904d\u5386"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6b65\u9aa4\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5224\u65ad\u4e24\u68f5\u6811\u8282\u70b9",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u90fd\u4e3a\u7a7a\u5219\u76f8\u540c"),(0,l.kt)("li",{parentName:"ul"},"\u4e00\u4e2a\u4e3a\u7a7a\u53e6\u4e00\u4e2a\u4e0d\u4e3a\u7a7a\uff0c\u4e0d\u540c"),(0,l.kt)("li",{parentName:"ul"},"\u8282\u70b9\u90fd\u6709\u503c\u4f46\u662f val \u4e0d\u540c\uff0c\u4e0d\u540c"),(0,l.kt)("li",{parentName:"ul"},"\u9012\u5f52\u4ed6\u4eec\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u590d\u6742\u5ea6\u5206\u6790\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0cn \u4e3a\u6811\u8282\u70b9\u4e2a\u6570"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u9012\u5f52\u5c42\u6570\uff0c\u5373\u9ad8\u5ea6\u8f83\u5c0f\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function (p, q) {\n  if (p === null && q === null) {\n    return true;\n  }\n  if (p === null || q === null) {\n    return false;\n  }\n  if (p.val !== q.val) {\n    return false;\n  }\n  return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n};\n")),(0,l.kt)("h3",{id:"\u65b9\u6cd5\u4e8cbfs"},"\u65b9\u6cd5\u4e8c\uff1abfs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u601d\u8def\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5224\u65ad\u6811\u7ed3\u6784\u662f\u5426\u76f8\u540c\uff0c\u518d\u5224\u65ad\u503c\u662f\u5426\u76f8\u540c"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6b65\u9aa4\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u521b\u5efa\u961f\u5217\u5b58\u50a8\u4e8c\u53c9\u6811\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u6bcf\u6b21\u53d6\u961f\u5934\u8fdb\u884c\u6bd4\u8f83",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u82e5\u4e24\u4e2a\u8282\u70b9\u503c\u4e0d\u540c\u5219\u4e0d\u540c"),(0,l.kt)("li",{parentName:"ul"},"\u82e5\u503c\u76f8\u540c\uff0c\u5224\u65ad\u4e24\u4e2a\u5de6\u53f3\u5b50\u8282\u70b9\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u4e3a\u7a7a\u5219\u7ed3\u6784\u4e0d\u540c"),(0,l.kt)("li",{parentName:"ul"},"\u82e5\u4e24\u5de6\u53f3\u5b50\u8282\u70b9\u7ed3\u6784\u76f8\u540c\uff0c\u5c06\u975e\u7a7a\u8282\u70b9\u52a0\u5165\u961f\u5217"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u590d\u6742\u5ea6\u5206\u6790\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u4e8c\u53c9\u6811\u8282\u70b9\u6570"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u4e8c\u53c9\u6811\u8282\u70b9\u6570")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u961f\u5217\u53ef\u4ee5\u4f7f\u7528\u5bf9\u8c61\u7684\u5f62\u5f0f\uff0c\u53ea\u521b\u5efa\u4e00\u4e2a\u5c31 OK\uff0c\u5f88\u5de7\u5999")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function (p, q) {\n  if (p === null && q === null) {\n    return true;\n  } else if (p === null || q === null) {\n    return false;\n  }\n  const queue = [{ p, q }];\n  while (queue.length) {\n    const cur = queue.shift();\n    if (cur.p === null && cur.q === null) {\n      continue;\n    }\n    if (cur.p === null || cur.q === null) {\n      return false;\n    }\n    if (cur.p.val !== cur.q.val) {\n      return false;\n    }\n    queue.push({ p: cur.p.left, q: cur.q.left });\n    queue.push({ p: cur.p.right, q: cur.q.right });\n  }\n  return true;\n};\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function (p, q) {\n  if (p === null && q === null) {\n    return true;\n  } else if (p === null || q === null) {\n    return false;\n  }\n  const queue1 = [p];\n  const queue2 = [q];\n  while (queue1.length && queue2.length) {\n    const n1 = queue1.shift();\n    const n2 = queue2.shift();\n    const left1 = n1.left;\n    const left2 = n2.left;\n    const right1 = n1.right;\n    const right2 = n2.right;\n    if (n1.val !== n2.val) {\n      return false;\n    }\n    if ((left1 === null) ^ (left2 === null)) {\n      return false;\n    }\n    if ((right1 === null) ^ (right2 === null)) {\n      return false;\n    }\n    if (left1) {\n      queue1.push(left1);\n    }\n    if (left2) {\n      queue2.push(left2);\n    }\n    if (right1) {\n      queue1.push(right1);\n    }\n    if (right2) {\n      queue2.push(right2);\n    }\n  }\n  return queue1.length === 0 && queue2.length === 0;\n};\n")))}c.isMDXComponent=!0}}]);